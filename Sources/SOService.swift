import Foundation
import SOSwiftVocabulary

/// A service provided by an organization, e.g. delivery service, print services, etc.
public class SOService: SOIntangible, Service {
    
    public override class var type: String {
        return "Service"
    }
    
    /// The overall rating, based on a collection of reviews or ratings, of the item.
    public var aggregateRating: AggregateRating?
    /// The geographic area where a service or offered item is provided.
    public var areaServed: AreaServed?
    /// An intended audience, i.e. a group for whom something was created.
    public var audience: Audience?
    /// A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).
    public var availableChannel: ServiceChannel?
    /// An award won by or for this item.
    public var award: [String]?
    /// The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
    public var brand: [BrandOrOrganization]?
    /// An entity that arranges for an exchange between a buyer and a seller. In most cases a broker never acquires or releases ownership of a product or service involved in an exchange. If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
    public var broker: OrganizationOrPerson?
    /// A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
    public var category: TextOrThing?
    /// Indicates an OfferCatalog listing for this Organization, Person, or Service.
    public var hasOfferCatalog: OfferCatalog?
    /// The hours during which this service or contact is available.
    public var hoursAvailable: [OpeningHoursSpecification]?
    /// A pointer to another, somehow related product (or multiple products).
    public var isRelatedTo: [ProductOrService]?
    ///A pointer to another, functionally similar product (or multiple products).
    public var isSimilarTo: [ProductOrService]?
    /// An associated logo.
    public var logo: ImageObjectOrURL?
    /// An offer to provide this itemâ€”for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event.
    public var offers: [Offer]?
    /// The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
    public var provider: OrganizationOrPerson?
    /// Indicates the mobility of a provided service (e.g. 'static', 'dynamic').
    public var providerMobility: String?
    /// A review of the item.
    public var review: [Review]?
    /// The tangible thing generated by the service, e.g. a passport, permit, etc.
    public var serviceOutput: Thing?
    /// The type of service being offered, e.g. veterans' benefits, emergency relief, etc.
    public var serviceType: String?
    
    private enum CodingKeys: String, CodingKey {
        case aggregateRating
        case areaServed
        case audience
        case availableChannel
        case award
        case brand
        case broker
        case category
        case hasOfferCatalog
        case hoursAvailable
        case isRelatedTo
        case isSimilarTo
        case logo
        case offers
        case provider
        case providerMobility
        case review
        case serviceOutput
        case serviceType
    }
    
    public override init() {
        super.init()
    }
    
    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        self.aggregateRating = try container.decodeIfPresent(SOAggregateRating.self, forKey: .aggregateRating)
        self.areaServed = try container.decodeIfPresent(String.self, forKey: .areaServed)
        self.audience = try container.decodeIfPresent(SOAudience.self, forKey: .audience)
        self.availableChannel = try container.decodeIfPresent(SOServiceChannel.self, forKey: .availableChannel)
        self.award = try container.decodeIfPresent([String].self, forKey: .award)
        self.brand = try container.decodeBrandsOrOrganizationsIfPresent(forKey: .brand)
        self.broker = try container.decodeOrganizationOrPersonIfPresent(forKey: .broker)
        self.category = try container.decodeTextOrThingIfPresent(forKey: .category)
        self.hasOfferCatalog = try container.decodeIfPresent(SOOfferCatalog.self, forKey: .hasOfferCatalog)
        self.hoursAvailable = try container.decodeIfPresent([SOOpeningHoursSpecification].self, forKey: .hoursAvailable)
        self.isRelatedTo = try container.decodeProductsOrServicesIfPresent(forKey: .isRelatedTo)
        self.isSimilarTo = try container.decodeProductsOrServicesIfPresent(forKey: .isSimilarTo)
        self.logo = try container.decodeImageObjectOrURLIfPresent(forKey: .logo)
        self.offers = try container.decodeIfPresent([SOOffer].self, forKey: .offers)
        self.provider = try container.decodeOrganizationOrPersonIfPresent(forKey: .provider)
        self.providerMobility = try container.decodeIfPresent(String.self, forKey: .providerMobility)
        self.review = try container.decodeIfPresent([SOReview].self, forKey: .review)
        self.serviceOutput = try container.decodeIfPresent(SOThing.self, forKey: .serviceOutput)
        self.serviceType = try container.decodeIfPresent(String.self, forKey: .serviceType)
        
        try super.init(from: decoder)
    }
    
    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encodeIfPresent(self.aggregateRating, forKey: .aggregateRating)
        try container.encodeIfPresent(self.areaServed, forKey: .areaServed)
        try container.encodeIfPresent(self.audience, forKey: .audience)
        try container.encodeIfPresent(self.availableChannel, forKey: .availableChannel)
        try container.encodeIfPresent(self.award, forKey: .award)
        try container.encodeIfPresent(self.brand, forKey: .brand)
        try container.encodeIfPresent(self.broker, forKey: .broker)
        try container.encodeIfPresent(self.category, forKey: .category)
        try container.encodeIfPresent(self.hasOfferCatalog, forKey: .hasOfferCatalog)
        try container.encodeIfPresent(self.hoursAvailable, forKey: .hoursAvailable)
        try container.encodeIfPresent(self.isRelatedTo, forKey: .isRelatedTo)
        try container.encodeIfPresent(self.isSimilarTo, forKey: .isSimilarTo)
        try container.encodeIfPresent(self.logo, forKey: .logo)
        try container.encodeIfPresent(self.offers, forKey: .offers)
        try container.encodeIfPresent(self.provider, forKey: .provider)
        try container.encodeIfPresent(self.providerMobility, forKey: .providerMobility)
        try container.encodeIfPresent(self.review, forKey: .review)
        try container.encodeIfPresent(self.serviceOutput, forKey: .serviceOutput)
        try container.encodeIfPresent(self.serviceType, forKey: .serviceType)
        
        try super.encode(to: encoder)
    }
}

public extension KeyedEncodingContainer {
    public mutating func encodeIfPresent(_ value: Service?, forKey key: K) throws {
        if let typedValue = value as? SOService {
            try self.encode(typedValue, forKey: key)
        }
    }
}
